{"version":3,"sources":["Components/ContactsListRow.js","redux/actions/contactActions.js","redux/sagas/contactSaga.js","Components/ContactsList.js","Components/Header.js","Components/ContactModalField.js","utility/util.js","Components/ContactModal.js","Components/DeleteContactModal.js","App.js","redux/reducers/contactReducer.js","index.js","redux/configureStore.js"],"names":["ContactsListRow","_ref","onDelete","contact","Object","objectWithoutProperties","react_default","a","createElement","firstName","lastName","href","concat","phone","email","street","city","state","zip","ButtonToolbar_default","Button_default","variant","size","onClick","className","SET_CONTACTS","CONTACTS_REQUEST_ERROR","CONTACTS_REQUEST_SUCCESS","SHOW_DELETE_CONTACT_CONFIRM","HIDE_DELETE_CONTACT_CONFIRM","SHOW_ADD_NEW_CONTACT_MODAL","HIDE_ADD_NEW_CONTACT_MODAL","contactsRequestError","message","type","payload","contactsRequestSuccess","hideDeleteContactConfirm","hideAddNewContactModal","getContacts","deleteContact","addContact","watchGetContacts","watchDeleteContacts","watchAddContacts","rootSaga","GET_CONTACTS","DELETE_CONTACT","ADD_CONTACT","ENDPOINTS","NEW_CONTACT","uuid","response","regenerator_default","wrap","_context","prev","next","call","fetchContacts","sent","put","contacts","data","t0","stop","_marked","this","axios","get","_context2","deleteContactRequest","t1","status","abrupt","_marked2","delete","_context3","addContactRequest","_marked3","post","_context4","takeLatest","_marked4","_context5","action","_marked5","_context6","_marked6","_context7","all","_marked7","connect","dispatch","showDeleteContactConfirm","useEffect","contactsList","sortedList","sortBy","Table_default","hover","responsive","map","assign","key","Header","Navbar_default","bg","Brand","ContactModalField","as","controlId","label","value","onChange","onBlur","visited","error","others","formGroupExraProps","Form_default","Group","Label","Control","isInvalid","isValid","Feedback","isEmpty","text","test","useControlledInput","initialValue","_useState","useState","_useState2","slicedToArray","setValue","_useState3","_useState4","e","target","ContactModalHooks","_ref$contact","close","onSave","show","_useControlledInput","_useControlledInput2","setFirstName","firstNameVisited","setFirstNameVisited","_useControlledInput3","_useControlledInput4","setLastName","lastNameVisited","setLastNameVisited","_useControlledInput5","_useControlledInput6","setStreet","streetVisited","setStreetVisited","_useControlledInput7","_useControlledInput8","setCity","cityVisited","setCityVisited","_useControlledInput9","_useControlledInput10","setStateName","stateVisited","setStateVisited","_useControlledInput11","_useControlledInput12","setZip","zipVisited","setZipVisited","_useControlledInput13","_useControlledInput14","setPhone","phoneVisited","setPhoneVisited","_useControlledInput15","_useControlledInput16","setEmail","emailVisited","setEmailVisited","formRef","useRef","validateAddress","hasAddressFields","errors","validZip","useMemo","validEmail","validPhone","onSubmit","preventDefault","current","reset","onClose","Modal_default","onHide","ref","closeButton","Title","Body","Row","Col","placeholder","Footer","DeleteContactModal","showAddContactModal","showAddNewContactModal","showDeleteContactModal","contactToDelete","hideAddContactModal","hideDeleteContactModal","Components_ContactsList","defaultState","contactReducer","arguments","length","undefined","objectSpread","store","initialState","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","run","contactSaga","configureStore","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9aca1df6.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport PropTypes from 'prop-types';\n\nexport default function ContactsListRow({\n    onDelete,\n    ...contact\n}) {\n\n    return (\n        <tr>\n            <td>{contact.firstName}</td>\n            <td>{contact.lastName}</td>\n            <td><a href={`tel:${contact.phone}`}>{contact.phone}</a></td>\n            <td><a href={`mailto:${contact.email}`}>{contact.email}</a></td>\n            <td>{contact.street}</td>\n            <td>{contact.city}</td>\n            <td>{contact.state}</td>\n            <td>{contact.zip}</td>\n            <td>\n                <ButtonToolbar>\n                    <Button variant=\"outline-danger\" size=\"sm\" onClick={() => onDelete(contact)}>\n                        <span className=\"glyphicon glyphicon-trash\">Delete</span>\n                    </Button>\n                </ButtonToolbar>\n            </td>\n        </tr>\n    );\n}\n\nContactsListRow.propTypes = {\n    uuid: PropTypes.string.isRequired,\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    street: PropTypes.string,\n    city: PropTypes.string,\n    state: PropTypes.string,\n    zip: PropTypes.string,\n    phone: PropTypes.string,\n    email: PropTypes.string\n}","export const SET_CONTACTS = \"SET_CONTACTS\";\nexport const CONTACTS_REQUEST_ERROR = \"CONTACTS_REQUEST_ERROR\";\nexport const CONTACTS_REQUEST_SUCCESS = \"CONTACTS_REQUEST_SUCCESS\";\nexport const SHOW_DELETE_CONTACT_CONFIRM = \"SHOW_DELETE_CONTACT_CONFIRM\";\nexport const HIDE_DELETE_CONTACT_CONFIRM = \"HIDE_DELETE_CONTACT_CONFIRM\";\nexport const SHOW_ADD_NEW_CONTACT_MODAL = \"SHOW_ADD_NEW_CONTACT_MODAL\";\nexport const HIDE_ADD_NEW_CONTACT_MODAL = \"HIDE_ADD_NEW_CONTACT_MODAL\";\n\nexport function setContacts(contacts) {\n    return {\n        type: SET_CONTACTS,\n        payload: contacts\n    };\n}\n\nexport function contactsRequestError(message) {\n    return {\n        type: CONTACTS_REQUEST_ERROR,\n        payload: message\n    };\n}\n\nexport function contactsRequestSuccess() {\n    return {\n        type: CONTACTS_REQUEST_SUCCESS\n    }\n}\n\nexport function showDeleteContactConfirm(contact) {\n    return {\n        type: SHOW_DELETE_CONTACT_CONFIRM,\n        payload: contact\n    };\n}\n\nexport function hideDeleteContactConfirm(contact) {\n    return {\n        type: HIDE_DELETE_CONTACT_CONFIRM\n    };\n}\n\nexport function showAddNewContactModal() {\n    return {\n        type: SHOW_ADD_NEW_CONTACT_MODAL\n    };\n}\n\nexport function hideAddNewContactModal() {\n    return {\n        type: HIDE_ADD_NEW_CONTACT_MODAL\n    };\n}","import {put, takeLatest, all, call} from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport {\n    setContacts,\n    contactsRequestSuccess,\n    contactsRequestError,\n    hideDeleteContactConfirm,\n    hideAddNewContactModal\n} from '../actions/contactActions';\n\nexport const GET_CONTACTS = \"GET_CONTACTS\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\nexport const ADD_CONTACT = \"ADD_CONTACT\";\n\nconst ENDPOINTS = {\n    GET_CONTACTS: 'http://localhost:8080/api/v1/contacts',\n    NEW_CONTACT: 'http://localhost:8080/api/v1/contacts',\n    DELETE_CONTACT: (uuid) => `http://localhost:8080/api/v1/contacts/${uuid}`\n};\n\n// Our worker Saga: will perform the async increment task\nfunction* getContacts() {\n    try {\n        const response = yield call(fetchContacts);\n        yield put(setContacts(response.data));\n        yield put(contactsRequestSuccess());\n    } catch(error) {\n        yield put(contactsRequestError('Unable to get contacts at this time. Please try again later.'));\n    }\n}\n\nfunction fetchContacts() {\n    return axios.get(ENDPOINTS.GET_CONTACTS);\n}\n\nfunction* deleteContact(uuid) {\n    try {\n        yield call(() => deleteContactRequest(uuid));\n        yield put(contactsRequestSuccess());\n        // Fetch all contacts after deleting\n        yield put({type: GET_CONTACTS});\n        yield put(hideDeleteContactConfirm());\n    } catch(error) {\n        let message;\n        switch (error.status) {\n            case 404:\n                message = \"Unable to delete contact. Contact is already deleted.\";\n                break;\n            default:\n                message = \"Your request to delete a contact has failed. Please try again later.\";\n        }\n\n        yield put(contactsRequestError(message));\n    }\n}\n\nfunction deleteContactRequest(uuid) {\n    return axios.delete(ENDPOINTS.DELETE_CONTACT(uuid));\n}\n\nfunction* addContact(contact) {\n    try {\n        yield call(() => addContactRequest(contact));\n        yield put(contactsRequestSuccess());\n        // Fetch all contacts after adding a new one\n        yield put({type: GET_CONTACTS});\n        yield put(hideAddNewContactModal());\n    } catch(error) {\n        yield put(contactsRequestError(\"Unable to create a new contact at this time. Please try again later.\"));\n    }\n}\n\nfunction addContactRequest(contact) {\n    return axios.post(ENDPOINTS.NEW_CONTACT, contact);\n}\n\nexport function* watchGetContacts() {\n    yield takeLatest(GET_CONTACTS, getContacts);\n}\n\nexport function* watchDeleteContacts() {\n    yield takeLatest(DELETE_CONTACT, (action) => deleteContact(action.payload));\n}\n\nexport function* watchAddContacts() {\n    yield takeLatest(ADD_CONTACT, (action) => addContact(action.payload));\n}\n\nexport default function* rootSaga() {\n    yield all([\n        watchGetContacts(),\n        watchDeleteContacts(),\n        watchAddContacts()\n    ]);\n}","import React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport Table from 'react-bootstrap/Table';\nimport sortBy from 'lodash.sortby';\n\nimport ContactsListRow from './ContactsListRow';\n\nimport {GET_CONTACTS} from '../redux/sagas/contactSaga';\n\nimport {showDeleteContactConfirm} from '../redux/actions/contactActions';\n\nfunction ContactsList({contacts, getContacts, deleteContact}) {\n    useEffect(() => {\n        getContacts();\n    }, []);\n    const sortedList = sortContactsList(contacts);\n        \n    return (\n        <Table hover responsive>\n            <thead>\n                <tr>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>Phone Number</th>\n                    <th>Email</th>\n                    <th>Street Address</th>\n                    <th>City</th>\n                    <th>State</th>\n                    <th>Zip</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {sortedList.map((contact) => {\n                    return (\n                        <ContactsListRow\n                            key={contact.uuid}\n                            onDelete={deleteContact}\n                            {...contact}\n                        />\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n}\n\nfunction sortContactsList(contactsList) {\n    return sortBy(contactsList, ['lastName', 'firstName', 'state', 'city', 'zip', 'street', 'email']);\n}\n\nfunction mapStateToProps(state) {\n    return {\n        contacts: state.contacts\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getContacts: () => dispatch({type: GET_CONTACTS}),\n        deleteContact: (contact) => dispatch(showDeleteContactConfirm(contact))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\n\nexport default function Header() {\n    return (\n        <Navbar bg=\"primary\" variant=\"dark\">\n            <Navbar.Brand>Contacts Manager</Navbar.Brand>\n        </Navbar>\n    );\n}","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\n\nexport default function ContactModalField({\n    as,\n    controlId,\n    label,\n    value,\n    onChange,\n    onBlur,\n    visited,\n    error,\n    ...others\n}) {\n    let formGroupExraProps = {};\n    if (as) {\n         formGroupExraProps.as = as;\n    }\n    return (\n        <Form.Group {...formGroupExraProps} controlId={controlId}>\n            <Form.Label>{label}</Form.Label>\n            <Form.Control\n                value={value}\n                onChange={onChange}\n                onBlur={onBlur}\n                isInvalid={visited && error}\n                isValid={visited && !error}\n                {...others}\n            />\n            <Form.Control.Feedback type=\"invalid\">\n                {error}\n            </Form.Control.Feedback>\n        </Form.Group>\n    );\n}\n","/**\n * Checks to see if the text is a valid 5 digit zip code\n * @param {String} zip the text to check\n * @returns {Boolean} true if the text is a valid email address\n */\nexport function validZip(zip) {\n    const zipRegEx = /^\\d{5}$/;\n    return zipRegEx.test(zip);\n}\n\n/**\n * Checks to see if the text is a valid email address.\n * @param {String} email the text to check\n * @returns {Boolean} true if the text is a valid email address\n */\nexport function validEmail(email) {\n    // Email RegEx from https://stackoverflow.com/a/46181\n    const emailRegEx = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return emailRegEx.test(email);\n}\n\n/**\n * Checks to see if the text is a valid phone number. Accepts all formats.\n * @param {String} phone the string to validate\n * @returns {Boolean} true if the text is a valid phone number\n */\nexport function validPhone(phone) {\n    // Phone RegEx from\n    const phoneRegEx = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\n    return phoneRegEx.test(phone);\n}\n\n/**\n * Checks the text for null, undefined, empty, or just whitespace\n * @param {String} text the text to test\n * @returns {Boolean} true if string is empty\n */\nexport function isEmpty(text) {\n    const whitespaceRegEx = /^\\s*$/;\n    return whitespaceRegEx.test(text);\n}","import React, {useState, useMemo, useRef} from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\n\nimport ContactModalField from './ContactModalField';\nimport {\n    validEmail,\n    validPhone,\n    validZip,\n    isEmpty\n} from '../utility/util';\n\n// Custom hook\nfunction useControlledInput(initialValue) {\n    let [value, setValue] = useState(initialValue);\n    let [visited, setVisited] = useState(false);\n\n    function updateValue(e) {\n        setValue(e.target.value);\n    }\n\n    return [value, updateValue, visited, setVisited];\n}\n\nexport default function ContactModalHooks({contact = {}, close, onSave, show}) {\n    let [firstName, setFirstName, firstNameVisited, setFirstNameVisited] = useControlledInput(contact.firstName || '');\n    let [lastName, setLastName, lastNameVisited, setLastNameVisited] = useControlledInput(contact.lastName || '');\n    let [street, setStreet, streetVisited, setStreetVisited] = useControlledInput(contact.state || '');\n    let [city, setCity, cityVisited, setCityVisited] = useControlledInput(contact.city || '');\n    let [state, setStateName, stateVisited, setStateVisited] = useControlledInput(contact.state || '');\n    let [zip, setZip, zipVisited, setZipVisited] = useControlledInput(contact.zip || '');\n    let [phone, setPhone, phoneVisited, setPhoneVisited] = useControlledInput(contact.phone || '');\n    let [email, setEmail, emailVisited, setEmailVisited] = useControlledInput(contact.email || '');\n\n    let formRef = useRef();\n\n    function validateAddress() {\n        let hasAddressFields = !!(street || city || state || zip);\n        let errors = {};\n\n        if (hasAddressFields) {\n            errors.street = isEmpty(street) ? 'Enter a valid address' : null;\n            errors.city = isEmpty(city) ? 'Enter a valid city' : null;\n            errors.state = isEmpty(state) ? 'Enter a valid state' : null;\n            errors.zip = validZip(zip) ? null : 'Enter a valid 5 digit zip';\n        }\n        setStreetVisited(hasAddressFields);\n        setCityVisited(hasAddressFields);\n        setStateVisited(hasAddressFields);\n        setZipVisited(hasAddressFields);\n\n        return errors;\n    }\n\n    function validate() {\n        let errors = validateAddress();\n        errors.firstName = isEmpty(firstName) ? 'First name is required' : null;\n        errors.lastName = isEmpty(lastName) ? 'Last name is required' : null;\n        errors.email = validEmail(email) ? null : 'Enter a valid email';\n        errors.phone = validPhone(phone) ? null : 'Enter a valid phone';\n\n        return errors;\n    }\n\n    const errors = useMemo(validate, [\n        firstName,\n        lastName,\n        street,\n        city,\n        state,\n        zip,\n        phone,\n        email\n    ]);\n\n    function onSubmit(e) {\n        e.preventDefault();\n        \n        // if we have any errors, halt submission\n        for (let key in errors) {\n            if (errors[key]) {\n                // set required fields as visited so that the errors show up\n                setFirstNameVisited(true);\n                setLastNameVisited(true);\n                setEmailVisited(true);\n                setPhoneVisited(true);\n                return;\n            }\n        }\n        \n        const contact = {\n            firstName,\n            lastName,\n            street,\n            city,\n            state,\n            zip,\n            phone,\n            email\n        };\n        onSave(contact);\n        // clear out the form\n        formRef.current.reset();\n    }\n\n    function onClose() {\n        close();\n        formRef.current.reset();\n    }\n\n    return (\n        <Modal size= \"lg\" show={show} onHide={onClose}>\n            <form onSubmit={onSubmit} ref={formRef}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        {contact.firstName ? `Editing Info for ${firstName} ${lastName}` : 'New Contact'}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Row>\n                        <ContactModalField\n                            as={Col}\n                            controlId=\"firstName\"\n                            label=\"First Name\"\n                            value={firstName}\n                            onChange={setFirstName}\n                            onBlur={() => !firstNameVisited && setFirstNameVisited(!!firstName)}\n                            visited={firstNameVisited}\n                            error={errors.firstName}\n                        />\n\n                        <ContactModalField\n                            as={Col}\n                            controlId=\"lastName\"\n                            label=\"Last Name\"\n                            value={lastName}\n                            onChange={setLastName}\n                            onBlur={() => !lastNameVisited && setLastNameVisited(!!lastName)}\n                            visited={lastNameVisited}\n                            error={errors.lastName}\n                        />\n                    </Form.Row>\n\n                    <Form.Row>\n                        <ContactModalField\n                            as={Col}\n                            controlId=\"email\"\n                            label=\"Email\"\n                            value={email}\n                            onChange={setEmail}\n                            onBlur={() => !emailVisited && setEmailVisited(!!email)}\n                            visited={emailVisited}\n                            error={errors.email}\n                            type=\"email\"\n                        />\n\n                        <ContactModalField\n                            as={Col}\n                            controlId=\"phone\"\n                            label=\"Phone Number\"\n                            value={phone}\n                            onChange={setPhone}\n                            onBlur={() => !phoneVisited && setPhoneVisited(!!phone)}\n                            visited={phoneVisited}\n                            error={errors.phone}\n                            type=\"tel\"\n                        />\n                    </Form.Row>\n\n                    <ContactModalField\n                        controlId=\"street\"\n                        label=\"Address\"\n                        value={street}\n                        onChange={setStreet}\n                        onBlur={validateAddress}\n                        visited={streetVisited}\n                        error={errors.street}\n                        placeholder=\"1234 Main St\"\n                    />\n\n                    <Form.Row>\n                        <ContactModalField\n                            as={Col}\n                            controlId=\"city\"\n                            label=\"City\"\n                            value={city}\n                            onChange={setCity}\n                            onBlur={validateAddress}\n                            visited={cityVisited}\n                            error={errors.city}\n                        />\n\n                        <ContactModalField\n                            as={Col}\n                            controlId=\"state\"\n                            label=\"State\"\n                            value={state}\n                            onChange={setStateName}\n                            onBlur={validateAddress}\n                            visited={stateVisited}\n                            error={errors.state}\n                        />\n\n                        <ContactModalField\n                            as={Col}\n                            controlId=\"zip\"\n                            label=\"Zip\"\n                            value={zip}\n                            onChange={setZip}\n                            onBlur={validateAddress}\n                            visited={zipVisited}\n                            error={errors.zip}\n                        />\n                    </Form.Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button type=\"submit\" onClick={onSubmit} variant=\"success\">Save</Button>\n                    <Button onClick={onClose} variant=\"secondary\">Close</Button>\n                </Modal.Footer>\n            </form>\n        </Modal>\n    );\n}\n\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nexport default function DeleteContactModal({show, close, contact, onDelete}) {\n    // This means the redux store hasn't set a contact to delete yet.\n    if (!contact) {\n        return null;\n    }\n\n    return (\n        <Modal size= \"sm\" show={show}>\n            <Modal.Header closeButton onHide={close}>\n                <Modal.Title>\n                    Deleting {`${contact.firstName} ${contact.lastName}`}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    Are you sure you want to delete {`${contact.firstName} ${contact.lastName}`}?\n                </p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={() => onDelete(contact.uuid)} variant=\"danger\">Delete</Button>\n                <Button onClick={close} variant=\"secondary\">Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","import React from 'react';\n\nimport {connect} from 'react-redux';\n\nimport Button from 'react-bootstrap/Button';\n\nimport ContactsList from './Components/ContactsList';\nimport Header from './Components/Header';\nimport ContactModal from './Components/ContactModal';\nimport DeleteContactModal from './Components/DeleteContactModal';\n\nimport {\n    hideAddNewContactModal,\n    hideDeleteContactConfirm,\n    showAddNewContactModal\n} from './redux/actions/contactActions';\n\nimport {DELETE_CONTACT, ADD_CONTACT} from './redux/sagas/contactSaga';\n\nimport './App.css';\n\nfunction App({\n    showAddNewContactModal,\n    showAddContactModal,\n    hideAddContactModal,\n    addContact,\n    showDeleteContactModal,\n    contactToDelete,\n    hideDeleteContactModal,\n    deleteContact\n}) {\n    return (\n        <div>\n            <header>\n                <Header />\n            </header>\n            <div className=\"mainContent\">\n                <h1 className=\"pageTitle\">Maine Doe's Contacts</h1>\n                <Button onClick={showAddNewContactModal} className=\"addContactButton\" variant=\"outline-success\">Add Contact</Button>\n                <ContactsList />\n            </div>\n            <ContactModal\n                show={showAddContactModal}\n                close={hideAddContactModal}\n                onSave={addContact}\n            />\n            <DeleteContactModal\n                show={showDeleteContactModal}\n                contact={contactToDelete}\n                close={hideDeleteContactModal}\n                onDelete={deleteContact}\n            />\n        </div>\n    );\n}\n\nfunction mapStateToProps(state) {\n    return {\n        showAddContactModal: state.showAddNewContactModal,\n        showDeleteContactModal: state.showDeleteContactConfirm,\n        contactToDelete: state.contactToDelete\n    };\n}\n\nfunction mapDisptachToProps(dispatch) {\n    return {\n        showAddNewContactModal: () => dispatch(showAddNewContactModal()),\n        hideAddContactModal: () => dispatch(hideAddNewContactModal()),\n        hideDeleteContactModal: () => dispatch(hideDeleteContactConfirm()),\n        deleteContact: (uuid) => dispatch({type: DELETE_CONTACT, payload: uuid}),\n        addContact: (contact) => dispatch({type: ADD_CONTACT, payload: contact})\n    };\n}\n\nexport default connect(mapStateToProps, mapDisptachToProps)(App);\n","import {\n    SET_CONTACTS,\n    CONTACTS_REQUEST_ERROR,\n    CONTACTS_REQUEST_SUCCESS,\n    SHOW_ADD_NEW_CONTACT_MODAL,\n    SHOW_DELETE_CONTACT_CONFIRM,\n    HIDE_ADD_NEW_CONTACT_MODAL,\n    HIDE_DELETE_CONTACT_CONFIRM\n} from '../actions/contactActions';\n\nconst defaultState = {\n    contacts: [],\n    error: '',\n    showAddNewContactModal: false,\n    showDeleteContactConfirm: false,\n    contactToDelete: null\n};\n\nexport default function(state = {...defaultState}, action) {\n    switch (action.type) {\n        case SET_CONTACTS:\n            return {...state, contacts: action.payload}\n        case CONTACTS_REQUEST_SUCCESS:\n            return {...state, error: ''};\n        case CONTACTS_REQUEST_ERROR:\n            return {...state, error: action.payload};\n        case SHOW_ADD_NEW_CONTACT_MODAL:\n            return {...state, showAddNewContactModal: true};\n        case HIDE_ADD_NEW_CONTACT_MODAL:\n            return {...state, showAddNewContactModal: false}\n        case SHOW_DELETE_CONTACT_CONFIRM:\n            return {...state, showDeleteContactConfirm: true, contactToDelete: action.payload};\n        case HIDE_DELETE_CONTACT_CONFIRM:\n            return {...state, showDeleteContactConfirm: false};\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport App from './App';\n\nimport configureStore from './redux/configureStore';\n// import * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport './bootstrap.min.css'; // Courtesy of: https://bootswatch.com/flatly/\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport contactReducer from './reducers/contactReducer';\n\nimport contactSaga from './sagas/contactSaga';\n\nexport default function configureStore(initialState) {\n    const sagaMiddleware = createSagaMiddleware();\n\n    // Needed to make redux dev tools work.\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n    const store = createStore(\n        contactReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(sagaMiddleware))\n    );\n\n    sagaMiddleware.run(contactSaga);\n\n    return store;\n}"],"sourceRoot":""}